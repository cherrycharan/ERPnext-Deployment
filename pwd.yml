version: "3"

services:
  # traefik:
  #   image: traefik:v2.5
  #   command:
  #     - --api.insecure=true
  #     - --providers.docker=true
  #     - --providers.docker.exposedbydefault=false
  #     - --entrypoints.web.address=:80
  #     - --entrypoints.websecure.address=:443
  #     - --entrypoints.webdashboard.address=:8081
  #     - --certificatesresolvers.myresolver.acme.httpchallenge=true
  #     - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
  #     - --certificatesresolvers.myresolver.acme.email=email@yourdomain.in
  #     - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
  #     # Add dashboard configuration
  #     - --api.dashboard=true
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     - "8081:8081"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./letsencrypt:/letsencrypt
  #   labels:
  #     # Dashboard configuration
  #     - "traefik.http.routers.api.rule=Host(`traefik.localhost`)"
  #     - "traefik.http.routers.api.service=api@internal"
  #     - "traefik.http.routers.api.entrypoints=web"
  #     - "traefik.http.services.api.loadbalancer.server.port=8080"
  #     - "traefik.http.routers.api.entrypoints=webdashboard"

  # custom-domain:
  #   image: caddy:2
  #   command:
  #     - caddy
  #     - reverse-proxy
  #     - --to
  #     - frontend:8080
  #     - --from
  #     - :2016
  #   labels:
  #     - traefik.enable=true
  #     - traefik.docker.network=traefik-public
  #     - traefik.http.services.custom-domain.loadbalancer.server.port=2016
  #     - traefik.http.routers.custom-domain.service=custom-domain
  #     - traefik.http.routers.custom-domain.entrypoints=web,websecure
  #     - traefik.http.routers.custom-domain.rule=Host(`erp.yourdomain.in`)
  #     - traefik.http.middlewares.custom-domain.headers.customrequestheaders.Host=erp.yourdomain.in
  #     - traefik.http.routers.custom-domain.middlewares=custom-domain
  #     - traefik.http.routers.custom-domain.tls.certresolver=myresolver
  #   networks:
  #     - traefik-public
  #     - bench-network

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx-config:/etc/nginx/conf.d
      - ./letsencrypt:/etc/letsencrypt
      - ./nginx-webroot:/usr/share/nginx/html  # Mounting a volume for the webroot
    ports:
      - "80:80"
      - "443:443"
    entrypoint:
      - /bin/sh
      - -c
      - |
        if [ ! -f "/etc/letsencrypt/live/erp.yourdomain.in/fullchain.pem" ]; then
          certbot certonly --webroot -w /usr/share/nginx/html -d erp.yourdomain.in --non-interactive --agree-tos --email email@yourdomain.in
        fi
        nginx -g "daemon off;"
    depends_on:
      - nginx-config-init
      - frontend

  nginx-config-init:
    image: busybox
    volumes:
      - ./nginx-config:/etc/nginx/conf.d
    command: /bin/sh -c "echo 'server { listen 80; server_name erp.yourdomain.in; root /usr/share/nginx/html; location / { proxy_pass http://frontend:8080; proxy_set_header Host $$host; proxy_set_header X-Real-IP $$remote_addr; location ~ /.well-known { allow all; } }' > /etc/nginx/conf.d/default.conf && echo 'server { listen 443 ssl; server_name erp.yourdomain.in; ssl_certificate /etc/letsencrypt/live/erp.yourdomain.in/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/erp.yourdomain.in/privkey.pem; root /usr/share/nginx/html; location / { proxy_pass http://frontend:8080; proxy_set_header Host $$host; proxy_set_header X-Real-IP $$remote_addr; } }' >> /etc/nginx/conf.d/default.conf"

  certbot:
    image: certbot/certbot
    volumes:
      - ./letsencrypt:/etc/letsencrypt
      - ./nginx-webroot:/usr/share/nginx/html
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"



  backend:
    image: frappe/erpnext:v14.43.0
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  configurator:
    image: frappe/erpnext:v14.43.0
    deploy:
      restart_policy:
        condition: none
    entrypoint:
      - bash
      - -c
    command:
      - >
        ls -1 apps > sites/apps.txt;
        bench set-config -g db_host $$DB_HOST;
        bench set-config -gp db_port $$DB_PORT;
        bench set-config -g redis_cache "redis://$$REDIS_CACHE";
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE";
        bench set-config -g redis_socketio "redis://$$REDIS_SOCKETIO";
        bench set-config -gp socketio_port $$SOCKETIO_PORT;
    environment:
      DB_HOST: db
      DB_PORT: "3306"
      REDIS_CACHE: redis-cache:6379
      REDIS_QUEUE: redis-queue:6379
      REDIS_SOCKETIO: redis-socketio:6379
      SOCKETIO_PORT: "9000"
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  create-site:
    image: frappe/erpnext:v14.43.0
    deploy:
      restart_policy:
        condition: none
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    entrypoint:
      - bash
      - -c
    command:
      - >
        wait-for-it -t 120 db:3306;
        wait-for-it -t 120 redis-cache:6379;
        wait-for-it -t 120 redis-queue:6379;
        wait-for-it -t 120 redis-socketio:6379;
        export start=`date +%s`;
        until [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".db_host // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_cache // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_queue // empty"` ]];
        do
          echo "Waiting for sites/common_site_config.json to be created";
          sleep 5;
          if (( `date +%s`-start > 120 )); then
            echo "could not find sites/common_site_config.json with required keys";
            exit 1
          fi
        done;
        echo "sites/common_site_config.json found";
        bench new-site erp.yourdomain.in --no-mariadb-socket --admin-password=admin --db-root-password=admin --install-app erpnext --set-default;

  db:
    image: mariadb:10.6
    healthcheck:
      test: mysqladmin ping -h localhost --password=admin
      interval: 1s
      retries: 15
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
      - --skip-innodb-read-only-compressed # Temporary fix for MariaDB 10.6
    environment:
      MYSQL_ROOT_PASSWORD: admin
    volumes:
      - db-data:/var/lib/mysql
    ports:
      - "3306:3306"


  frontend:
    image: frappe/erpnext:v14.43.0
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - nginx-entrypoint.sh
    environment:
      BACKEND: backend:8000
      FRAPPE_SITE_NAME_HEADER: erp.yourdomain.in
      SOCKETIO: websocket:9000
      UPSTREAM_REAL_IP_ADDRESS: 127.0.0.1
      UPSTREAM_REAL_IP_HEADER: X-Forwarded-For
      UPSTREAM_REAL_IP_RECURSIVE: "off"
      PROXY_READ_TIMEOUT: 120
      CLIENT_MAX_BODY_SIZE: 50m
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    ports:
      - "8080:8080"

  queue-default:
    image: frappe/erpnext:v14.43.0
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - bench
      - worker
      - --queue
      - default
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  queue-long:
    image: frappe/erpnext:v14.43.0
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - bench
      - worker
      - --queue
      - long
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  queue-short:
    image: frappe/erpnext:v14.43.0
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - bench
      - worker
      - --queue
      - short
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  redis-queue:
    image: redis:6.2-alpine
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - redis-queue-data:/data

  redis-cache:
    image: redis:6.2-alpine
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - redis-cache-data:/data

  redis-socketio:
    image: redis:6.2-alpine
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - redis-socketio-data:/data

  scheduler:
    image: frappe/erpnext:v14.43.0
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - bench
      - schedule
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  websocket:
    image: frappe/erpnext:v14.43.0
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
networks:
    traefik-public:
      driver: bridge
    bench-network:
      name: bench-network
      driver: bridge
volumes:
  nginx-webroot:
  db-data:
  redis-queue-data:
  redis-cache-data:
  redis-socketio-data:
  sites:
  logs: